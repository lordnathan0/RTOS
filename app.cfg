var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Boot = xdc.useModule('ti.catalog.c2800.init.Boot');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the 
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = true;
var spitxParams = new Hwi.Params();
spitxParams.instance.name = "spitx";
Program.global.spitx = Hwi.create(73, "&HWI_SPI_TxComplete", spitxParams);
var spirxParams = new Hwi.Params();
spirxParams.instance.name = "spirx";
Program.global.spirx = Hwi.create(72, "&HWI_SPI_RxRecieved", spirxParams);
var EVT_SPI_TxParams = new Event.Params();
EVT_SPI_TxParams.instance.name = "EVT_SPI_Tx";
Program.global.EVT_SPI_Tx = Event.create(EVT_SPI_TxParams);
var EVT_SPI_RxParams = new Event.Params();
EVT_SPI_RxParams.instance.name = "EVT_SPI_Rx";
Program.global.EVT_SPI_Rx = Event.create(EVT_SPI_RxParams);
var SEM_SPI_TxParams = new Semaphore.Params();
SEM_SPI_TxParams.instance.name = "SEM_SPI_Tx";
SEM_SPI_TxParams.mode = Semaphore.Mode_BINARY;
Program.global.SEM_SPI_Tx = Semaphore.create(1, SEM_SPI_TxParams);
var task0Params = new Task.Params();
task0Params.instance.name = "Start";
task0Params.priority = 15;
Program.global.Start = Task.create("&TSK_Powerup", task0Params);
var BQFaultParams = new Hwi.Params();
BQFaultParams.instance.name = "BQFault";
Program.global.BQFault = Hwi.create(121, "&HWI_BQFault", BQFaultParams);
var BQAlertParams = new Hwi.Params();
BQAlertParams.instance.name = "BQAlert";
Program.global.BQAlert = Hwi.create(120, "&HWI_BQAlert", BQAlertParams);
var EVT_BQFaultParams = new Event.Params();
EVT_BQFaultParams.instance.name = "EVT_BQFault";
Program.global.EVT_BQFault = Event.create(EVT_BQFaultParams);
var EVT_BQAlertParams = new Event.Params();
EVT_BQAlertParams.instance.name = "EVT_BQAlert";
Program.global.EVT_BQAlert = Event.create(EVT_BQAlertParams);
var BQFualtTaskParams = new Task.Params();
BQFualtTaskParams.instance.name = "BQFualtTask";
BQFualtTaskParams.priority = 9;
Program.global.BQFualtTask = Task.create("&TSK_BQFault", BQFualtTaskParams);
var BQAlertTaskParams = new Task.Params();
BQAlertTaskParams.instance.name = "BQAlertTask";
BQAlertTaskParams.priority = 9;
Program.global.BQAlertTask = Task.create("&TSK_BQAlert", BQAlertTaskParams);
var EVT_DRDYParams = new Event.Params();
EVT_DRDYParams.instance.name = "EVT_BQ_DRDY";
Program.global.EVT_BQ_DRDY = Event.create(EVT_DRDYParams);
var TSK_BQ_DRDYParams = new Task.Params();
TSK_BQ_DRDYParams.instance.name = "BQ_DRDY";
Program.global.BQ_DRDY = Task.create("&TSK_BQ_DRDY", TSK_BQ_DRDYParams);
var EVT_ErrorParams = new Event.Params();
EVT_ErrorParams.instance.name = "EVT_Error";
Program.global.EVT_Error = Event.create(EVT_ErrorParams);
var ErrorHandlerParams = new Task.Params();
ErrorHandlerParams.instance.name = "ErrorHandler";
ErrorHandlerParams.priority = 14;
Program.global.ErrorHandler = Task.create("&TSK_ErrorHandler", ErrorHandlerParams);
var BQ_DRDYParams = new Hwi.Params();
BQ_DRDYParams.instance.name = "BQ_DRDY";
Program.global.BQ_DRDY = Hwi.create(122, "&HWI_BQ_DRDY", BQ_DRDYParams);
Clock.tickPeriod = 100;
var EVT_BQParams = new Event.Params();
EVT_BQParams.instance.name = "EVT_BQ";
Program.global.EVT_BQ = Event.create(EVT_BQParams);
var BQParams0 = new Task.Params();
BQParams0.instance.name = "BQ";
BQParams0.priority = 9;
BQParams0.stackSize = 1024;
Program.global.BQ = Task.create("&RTSK_BQ", BQParams0);
var BQ_CLOCKParams = new Clock.Params();
BQ_CLOCKParams.instance.name = "BQ_CLOCK";
BQ_CLOCKParams.period = 10000;
BQ_CLOCKParams.startFlag = false;
Program.global.BQ_CLOCK = Clock.create("&RTSK_BQ_Event", 1, BQ_CLOCKParams);
Boot.pllOSCCLK = 30;
BIOS.cpuFreq.lo = 150000000;

var EVT_eCAN_IntParams = new Event.Params();
EVT_eCAN_IntParams.instance.name = "EVT_eCAN_Int";
Program.global.EVT_eCAN_Int = Event.create(EVT_eCAN_IntParams);
var Ecan_intParams = new Hwi.Params();
Ecan_intParams.instance.name = "Ecan_int";
Program.global.Ecan_int = Hwi.create(101, "&HWI_eCAN_Int", Ecan_intParams);
var EVT_SCIa_TxParams = new Event.Params();
EVT_SCIa_TxParams.instance.name = "EVT_SCIa_Tx";
Program.global.EVT_SCIa_Tx = Event.create(EVT_SCIa_TxParams);
var EVT_SCIa_RxParams = new Event.Params();
EVT_SCIa_RxParams.instance.name = "EVT_SCIa_Rx";
Program.global.EVT_SCIa_Rx = Event.create(EVT_SCIa_RxParams);
var SCIa_RXParams = new Hwi.Params();
SCIa_RXParams.instance.name = "SCIa_RX";
Program.global.SCIa_RX = Hwi.create(96, "&HWI_SCIa_RxRecieved", SCIa_RXParams);
var SCIa_TXParams = new Hwi.Params();
SCIa_TXParams.instance.name = "SCIa_TX";
Program.global.SCIa_TX = Hwi.create(97, "&HWI_SCIa_TxComplete", SCIa_TXParams);
var EVT_LCD_TxParams = new Event.Params();
EVT_LCD_TxParams.instance.name = "EVT_LCD_Tx";
Program.global.EVT_LCD_Tx = Event.create(EVT_LCD_TxParams);
var LCD_TXParams = new Hwi.Params();
LCD_TXParams.instance.name = "LCD_TX";
Program.global.LCD_TX = Hwi.create(99, "&HWI_LCD_TxComplete", LCD_TXParams);
var LCD_CLOCKParams = new Clock.Params();
LCD_CLOCKParams.instance.name = "LCD_CLOCK";
LCD_CLOCKParams.period = 10000;
Program.global.LCD_CLOCK = Clock.create("&CLK_LCD", 1, LCD_CLOCKParams);
var EVT_LCD_CLKParams = new Event.Params();
EVT_LCD_CLKParams.instance.name = "EVT_LCD_CLK";
Program.global.EVT_LCD_CLK = Event.create(EVT_LCD_CLKParams);
var LCDParams = new Task.Params();
LCDParams.instance.name = "LCD";
LCDParams.priority = 8;
LCDParams.stackSize = 1024;
Program.global.LCD = Task.create("&TSK_LCD", LCDParams);
var BT_CLOCKParams = new Clock.Params();
BT_CLOCKParams.instance.name = "BT_CLOCK";
BT_CLOCKParams.period = 10000;
Program.global.BT_CLOCK = Clock.create("&CLK_BT", 1, BT_CLOCKParams);
var EVT_BT_CLKParams = new Event.Params();
EVT_BT_CLKParams.instance.name = "EVT_BT_CLK";
Program.global.EVT_BT_CLK = Event.create(EVT_BT_CLKParams);
var BluetoothParams = new Task.Params();
BluetoothParams.instance.name = "Bluetooth";
BluetoothParams.priority = 8;
BluetoothParams.stackSize = 1024;
Program.global.Bluetooth = Task.create("&TSK_BT", BluetoothParams);
var ALFAT_CLOCKParams = new Clock.Params();
ALFAT_CLOCKParams.instance.name = "ALFAT_CLOCK";
ALFAT_CLOCKParams.period = 10000;
Program.global.ALFAT_CLOCK = Clock.create("&CLK_Alfat", 1, ALFAT_CLOCKParams);
var task7Params = new Task.Params();
task7Params.instance.name = "TSK_Rec";
task7Params.priority = 15;
task7Params.stackSize = 2048;
Program.global.TSK_Rec = Task.create("&TSK_Received", task7Params);
var task8Params = new Task.Params();
task8Params.instance.name = "Alfat";
task8Params.priority = 8;
task8Params.stackSize = 2048;
Program.global.Alfat = Task.create("&TSK_Alfat", task8Params);
var event13Params = new Event.Params();
event13Params.instance.name = "EVT_Alfat_CLK";
Program.global.EVT_Alfat_CLK = Event.create(event13Params);
var EVT_byteRecParams = new Event.Params();
EVT_byteRecParams.instance.name = "EVT_byteRec";
Program.global.EVT_byteRec = Event.create(EVT_byteRecParams);
var hwi9Params = new Hwi.Params();
hwi9Params.instance.name = "I2C";
Program.global.I2C = Hwi.create(88, "&HWI_I2C", hwi9Params);
var clock4Params = new Clock.Params();
clock4Params.instance.name = "EXT_ADC_CLOCK";
clock4Params.period = 10000;
Program.global.EXT_ADC_CLOCK = Clock.create("&CLK_Ext_ADC", 10000, clock4Params);
var EVT_Ext_ADC_CLKParams = new Event.Params();
EVT_Ext_ADC_CLKParams.instance.name = "EVT_Ext_ADC_CLK";
Program.global.EVT_Ext_ADC_CLK = Event.create(EVT_Ext_ADC_CLKParams);
var EVT_SleepParams = new Event.Params();
EVT_SleepParams.instance.name = "EVT_Sleep";
Program.global.EVT_Sleep = Event.create(EVT_SleepParams);
var change_modeParams = new Task.Params();
change_modeParams.instance.name = "change_mode";
change_modeParams.priority = 2;
Program.global.change_mode = Task.create("&TSK_Change_Mode", change_modeParams);
var wakeintParams = new Hwi.Params();
wakeintParams.instance.name = "wakeint";
Program.global.wakeint = Hwi.create(39, "&HWI_WAKEINT", wakeintParams);
var sleep_measurementParams = new Task.Params();
sleep_measurementParams.instance.name = "sleep_measurement";
sleep_measurementParams.priority = 12;
Program.global.sleep_measurement = Task.create("&TSK_Sleep_Measurment", sleep_measurementParams);
var EVT_Change_ModeParams = new Event.Params();
EVT_Change_ModeParams.instance.name = "EVT_Change_Mode";
Program.global.EVT_Change_Mode = Event.create(EVT_Change_ModeParams);
var EVT_Sleep_MParams = new Event.Params();
EVT_Sleep_MParams.instance.name = "EVT_Sleep_M";
Program.global.EVT_Sleep_M = Event.create(EVT_Sleep_MParams);
var ESTOPParams = new Hwi.Params();
ESTOPParams.instance.name = "ESTOP";
Program.global.ESTOP = Hwi.create(123, "&HWI_12v_Sense", ESTOPParams);
var Charge_SenseParams = new Hwi.Params();
Charge_SenseParams.instance.name = "Charge_Sense";
Program.global.Charge_Sense = Hwi.create(36, "&HWI_Charge_Sense", Charge_SenseParams);
var ON_SWParams = new Hwi.Params();
ON_SWParams.instance.name = "ON_SW";
Program.global.ON_SW = Hwi.create(35, "&HWI_ON_SW", ON_SWParams);
var ACD_completeParams = new Hwi.Params();
ACD_completeParams.instance.name = "ADC_complete";
Program.global.ADC_complete = Hwi.create(32, "&HWI_ADC_ConversionComplete", ACD_completeParams);
var ADCParams = new Task.Params();
ADCParams.instance.name = "adc_task";
ADCParams.priority = 8;
ADCParams.stackSize = 1024;
Program.global.adc_task = Task.create("&TSK_adc", ADCParams);
var EVT_ADCParams = new Event.Params();
EVT_ADCParams.instance.name = "EVT_ADC";
Program.global.EVT_ADC = Event.create(EVT_ADCParams);
var ADCParams0 = new Clock.Params();
ADCParams0.instance.name = "ADC_CLOCK";
ADCParams0.period = 10000;
Program.global.ADC_CLOCK = Clock.create("&CLK_ADC", 1, ADCParams0);
var TIMESTAMP_CLOCKParams = new Clock.Params();
TIMESTAMP_CLOCKParams.instance.name = "TIMESTAMP_CLOCK";
TIMESTAMP_CLOCKParams.period = 10000;
Program.global.TIMESTAMP_CLOCK = Clock.create("&CLK_TimeStamp", 1, TIMESTAMP_CLOCKParams);
var EVT_TimeStamp_CLKParams = new Event.Params();
EVT_TimeStamp_CLKParams.instance.name = "EVT_TimeStamp_CLK";
Program.global.EVT_TimeStamp_CLK = Event.create(EVT_TimeStamp_CLKParams);
var TimeStampParams = new Task.Params();
TimeStampParams.instance.name = "TimeStamp";
TimeStampParams.priority = 11;
Program.global.TimeStamp = Task.create("&TSK_TimeStamp", TimeStampParams);
var ext_adcParams = new Task.Params();
ext_adcParams.instance.name = "ext_adc";
ext_adcParams.priority = 9;
ext_adcParams.stackSize = 1024;
Program.global.ext_adc = Task.create("&TSK_Ext_ADC", ext_adcParams);
var EVT_Alfat_DONEParams = new Event.Params();
EVT_Alfat_DONEParams.instance.name = "EVT_Alfat_DONE";
Program.global.EVT_Alfat_DONE = Event.create(EVT_Alfat_DONEParams);
Task.defaultStackSize = 1024;
var Fault_OverrideParams = new Hwi.Params();
Fault_OverrideParams.instance.name = "Fault_Override";
Program.global.Fault_Override = Hwi.create(124, "&HWI_Fault_Override", Fault_OverrideParams);
